diff --git a/models/tensor_nerf.py b/models/tensor_nerf.py
index 204d62b..8ddddd7 100644
--- a/models/tensor_nerf.py
+++ b/models/tensor_nerf.py
@@ -20,11 +20,9 @@ import utils
 LOGGER = Logger(enable=False)
 
 
-def raw2alpha(sigma, flip, dist):
+def raw2alpha(sigma, dist):
     # sigma, dist  [N_rays, N_samples]
-    v = torch.exp(-sigma*dist)
-    alpha = torch.where(flip, v, 1-v)
-    # alpha = 1. - torch.exp(-sigma*dist)
+    alpha = 1. - torch.exp(-sigma*dist)
 
     # T is the term that integrates the alpha backwards to prevent occluded objects from influencing things
     # multiply in exponential space to take exponential of integral
@@ -38,20 +36,21 @@ def raw2alpha(sigma, flip, dist):
 
 
 class TensorNeRF(torch.nn.Module):
-    def __init__(self, rf, grid_size, aabb, diffuse_module, sampler=None, brdf=None, tonemap=None, normal_module=None, ref_module=None, bg_module=None,
-                 alphaMask=None, near_far=[2.0, 6.0], nEnvSamples=100, specularity_threshold=0.005, max_recurs=0,
+    def __init__(self, rf, aabb, diffuse_module, sampler, brdf_sampler=None, brdf=None, tonemap=None, normal_module=None, ref_module=None, bg_module=None,
+                 alphaMask=None, specularity_threshold=0.005, max_recurs=0,
                  max_normal_similarity=1, infinity_border=False, min_refraction=1.1, enable_refraction=True,
                  density_shift=-10, alphaMask_thres=0.001, distance_scale=25, rayMarch_weight_thres=0.0001,
                  max_bounce_rays=4000, roughness_rays=3, bounce_min_weight=0.001, appdim_noise_std=0.0,
                  world_bounces=0, fea2denseAct='softplus', enable_alpha_mask=True, selector=None,
-                 max_floater_loss=6, **kwargs):
+                 update_sampler_list=[5000], max_floater_loss=6, **kwargs):
         super(TensorNeRF, self).__init__()
-        self.rf = rf(aabb=aabb, grid_size=grid_size)
+        self.rf = rf(aabb=aabb)
         self.ref_module = ref_module(in_channels=self.rf.app_dim) if ref_module is not None else None
         self.normal_module = normal_module(in_channels=self.rf.app_dim) if normal_module is not None else None
         self.diffuse_module = diffuse_module(in_channels=self.rf.app_dim)
         self.brdf = brdf(in_channels=self.rf.app_dim) if brdf is not None else None
-        self.sampler = sampler if sampler is None else sampler(num_samples=roughness_rays)
+        self.brdf_sampler = brdf_sampler if brdf_sampler is None else brdf_sampler(num_samples=roughness_rays)
+        self.sampler = sampler
         self.selector = selector
         self.bg_module = bg_module
         if tonemap is None:
@@ -70,9 +69,8 @@ class TensorNeRF(torch.nn.Module):
         self.rayMarch_weight_thres = rayMarch_weight_thres
         self.fea2denseAct = fea2denseAct
         self.appdim_noise_std = appdim_noise_std
+        self.update_sampler_list = update_sampler_list
 
-        self.near_far = near_far
-        self.nEnvSamples = nEnvSamples
         self.bounce_min_weight = bounce_min_weight
         self.min_refraction = min_refraction
         self.enable_refraction = enable_refraction
@@ -89,6 +87,7 @@ class TensorNeRF(torch.nn.Module):
 
         self.max_normal_similarity = max_normal_similarity
         self.l = 0
+        self.sampler.update(self.rf)
         
     @property
     def device(self):
@@ -120,14 +119,14 @@ class TensorNeRF(torch.nn.Module):
         if self.bg_module is not None:
             config['bg_module']['bg_resolution'] = self.bg_module.bg_resolution
         ckpt = {'config': config, 'state_dict': self.state_dict()}
-        if self.alphaMask is not None:
-            alpha_volume = self.alphaMask.alpha_volume.cpu()
-            ckpt.update({'alphaMask': alpha_volume})
-            #  alpha_volume = self.alphaMask.alpha_volume.cpu().numpy()
-            #  ckpt.update({'alphaMask.shape': alpha_volume.shape})
-            #  ckpt.update(
-            #      {'alphaMask.mask': np.packbits(alpha_volume.reshape(-1))})
-            ckpt.update({'alphaMask.aabb': self.alphaMask.aabb.cpu()})
+        # if self.alphaMask is not None:
+        #     alpha_volume = self.alphaMask.alpha_volume.cpu()
+        #     ckpt.update({'alphaMask': alpha_volume})
+        #     #  alpha_volume = self.alphaMask.alpha_volume.cpu().numpy()
+        #     #  ckpt.update({'alphaMask.shape': alpha_volume.shape})
+        #     #  ckpt.update(
+        #     #      {'alphaMask.mask': np.packbits(alpha_volume.reshape(-1))})
+        #     ckpt.update({'alphaMask.aabb': self.alphaMask.aabb.cpu()})
         torch.save(ckpt, path)
 
     @staticmethod
@@ -137,172 +136,53 @@ class TensorNeRF(torch.nn.Module):
         # ic(ckpt['state_dict'].keys())
         grid_size = ckpt['state_dict']['rf.grid_size'].cpu()
         rf = hydra.utils.instantiate(config)(aabb=aabb, grid_size=grid_size)
-        if 'alphaMask.aabb' in ckpt.keys():
-            #  length = np.prod(ckpt['alphaMask.shape'])
-            #  alpha_volume = torch.from_numpy(np.unpackbits(ckpt['alphaMask.mask'])[
-            #                                  :length].reshape(ckpt['alphaMask.shape'])).float()
-            alpha_volume = ckpt['alphaMask']
-            rf.alphaMask = utils.AlphaGridMask(
-                ckpt['alphaMask.aabb'], alpha_volume)
+        # if 'alphaMask.aabb' in ckpt.keys():
+        #     #  length = np.prod(ckpt['alphaMask.shape'])
+        #     #  alpha_volume = torch.from_numpy(np.unpackbits(ckpt['alphaMask.mask'])[
+        #     #                                  :length].reshape(ckpt['alphaMask.shape'])).float()
+        #     alpha_volume = ckpt['alphaMask']
+        #     rf.alphaMask = utils.AlphaGridMask(
+        #         ckpt['alphaMask.aabb'], alpha_volume)
         rf.load_state_dict(ckpt['state_dict'], **kwargs)
         return rf
 
-    def sample_ray_ndc(self, rays_o, rays_d, focal, is_train=True, N_samples=-1):
-        N_samples = N_samples if N_samples > 0 else self.rf.nSamples
-        near, far = self.near_far
-        interpx = torch.linspace(near, far, N_samples).unsqueeze(0).to(rays_o)
-        if is_train:
-            l = torch.rand_like(interpx)
-            interpx += l.to(rays_o) * ((far - near) / N_samples)
-
-        rays_pts = rays_o[..., None, :] + \
-            rays_d[..., None, :] * interpx[..., None]
-        mask_outbbox = ((self.rf.aabb[0] > rays_pts) | (
-            rays_pts > self.rf.aabb[1])).any(dim=-1)
-
-        # add size
-        rays_pts = torch.cat([rays_pts, interpx.unsqueeze(-1)/focal], dim=-1)
-
-        return rays_pts, interpx, ~mask_outbbox
-
-    def sample_ray(self, rays_o, rays_d, focal, is_train=True, override_near=None, N_samples=-1, N_env_samples=-1):
-        # focal: ratio of meters to pixels at a distance of 1 meter
-        N_samples = N_samples if N_samples > 0 else self.rf.nSamples
-        N_env_samples = N_env_samples if N_env_samples > 0 else self.nEnvSamples
-        stepsize = self.rf.stepSize
-        near, far = self.near_far
-        if override_near is not None:
-            near = override_near
-        vec = torch.where(rays_d == 0, torch.full_like(rays_d, 1e-6), rays_d)
-        rate_a = (self.rf.aabb[1].to(rays_o) - rays_o) / vec
-        rate_b = (self.rf.aabb[0].to(rays_o) - rays_o) / vec
-        t_min = torch.minimum(rate_a, rate_b).amax(-1).clamp(min=near, max=far)
-
-        rng = torch.arange(N_samples, device=rays_o.device)[None].float()
-        # extend rng to sample towards infinity
-        if N_env_samples > 0:
-            ext_rng = N_samples + N_env_samples / \
-                torch.linspace(1, 1/N_env_samples, N_env_samples,
-                               device=rays_o.device)[None].float()
-            rng = torch.cat([rng, ext_rng], dim=1)
-
-        if is_train:
-            rng = rng.repeat(rays_d.shape[-2], 1)
-            # N, N_samples
-            # add noise along each ray
-            brng = rng.reshape(-1, N_samples+N_env_samples)
-            # brng = brng + torch.rand_like(brng[:, [0], [0]])
-            # r = torch.rand_like(brng[:, 0:1, 0:1])
-            r = torch.rand_like(brng[:, 0:1])
-            brng = brng + r
-            rng = brng.reshape(-1, N_samples+N_env_samples)
-        step = stepsize * rng
-        interpx = (t_min[..., None] + step)
-
-        rays_pts = rays_o[..., None, :] + rays_d[..., None, :] * interpx[..., None]
-        mask_outbbox = ((self.rf.aabb[0] > rays_pts) | (rays_pts > self.rf.aabb[1])).any(dim=-1)
-
-        # add size
-        rays_pts = torch.cat([rays_pts, interpx.unsqueeze(-1)/focal], dim=-1)
-        env_mask = torch.zeros_like(mask_outbbox)
-        env_mask[:, N_samples:] = 1
-
-        if self.rf.contract_space:
-            mask_outbbox = torch.zeros_like(mask_outbbox)
-
-        return rays_pts, interpx, ~mask_outbbox, env_mask
-
-    @torch.no_grad()
-    def getDenseAlpha(self, grid_size=None):
-        grid_size = self.rf.grid_size if grid_size is None else grid_size
-
-        dense_xyz = torch.stack([*torch.meshgrid(
-            torch.linspace(-1, 1, grid_size[0]),
-            torch.linspace(-1, 1, grid_size[1]),
-            torch.linspace(-1, 1, grid_size[2])),
-            torch.ones((grid_size[0], grid_size[1],
-                       grid_size[2]))*self.rf.units.min().cpu()*0.5
-        ], -1).to(self.device)
-
-        alpha = torch.zeros_like(dense_xyz[..., 0])
-        for i in range(grid_size[0]):
-            xyz_norm = dense_xyz[i].view(-1, 4)
-            sigma_feature = self.rf.compute_densityfeature(xyz_norm)
-            sigma = self.feature2density(sigma_feature)
-            alpha[i] = 1 - torch.exp(-sigma*self.rf.stepSize).reshape(*alpha[i].shape)
-
-        return alpha, dense_xyz
-
-    @torch.no_grad()
-    def updateAlphaMask(self, grid_size=(200, 200, 200)):
-
-        grid_size = [int(self.rf.density_res_multi*g) for g in grid_size]
-        alpha, dense_xyz = self.getDenseAlpha(grid_size)
-
-        dense_xyz = dense_xyz.transpose(0, 2).contiguous()
-        alpha = alpha.clamp(0, 1).transpose(0, 2).contiguous()[None, None]
-        total_voxels = grid_size[0] * grid_size[1] * grid_size[2]
-
-        ks = 3
-        alpha = F.max_pool3d(alpha, kernel_size=ks,
-                             padding=ks // 2, stride=1).view(grid_size[::-1])
-        # alpha[alpha >= self.alphaMask_thres] = 1
-        # alpha[alpha < self.alphaMask_thres] = 0
-
-        self.alphaMask = utils.AlphaGridMask(self.rf.aabb, alpha > self.alphaMask_thres).to(self.device)
-
-        valid_xyz = dense_xyz[alpha > 0.0]
-        if valid_xyz.shape[0] < 1:
-            print("No volume")
-            return self.rf.aabb
-
-        xyz_min = valid_xyz.amin(0)[:3]
-        xyz_max = valid_xyz.amax(0)[:3]
-
-        new_aabb = torch.stack((xyz_min, xyz_max))
-
-        total = torch.sum(alpha)
-        print(f"bbox: {xyz_min, xyz_max} alpha rest %%%f" %
-              (total/total_voxels*100))
-        return new_aabb
-
-    @torch.no_grad()
-    def filtering_rays(self, all_rays, all_rgbs, focal, N_samples=256, chunk=10240*5, bbox_only=False):
-        print('========> filtering rays ...')
-        tt = time.time()
-
-        N = torch.tensor(all_rays.shape[:-1]).prod()
-
-        mask_filtered = []
-        idx_chunks = torch.split(torch.arange(N), chunk)
-        for idx_chunk in idx_chunks:
-            rays_chunk = all_rays[idx_chunk].to(self.device)
-
-            rays_o, rays_d = rays_chunk[..., :3], rays_chunk[..., 3:6]
-            if bbox_only:
-                vec = torch.where(
-                    rays_d == 0, torch.full_like(rays_d, 1e-6), rays_d)
-                rate_a = (self.rf.aabb[1].to(rays_o) - rays_o) / vec
-                rate_b = (self.rf.aabb[0].to(rays_o) - rays_o) / vec
-                # .clamp(min=near, max=far)
-                t_min = torch.minimum(rate_a, rate_b).amax(-1)
-                # .clamp(min=near, max=far)
-                t_max = torch.maximum(rate_a, rate_b).amin(-1)
-                mask_inbbox = t_max > t_min
-
-            else:
-                xyz_sampled, _, _, _ = self.sample_ray(
-                    rays_o, rays_d, focal, N_samples=N_samples, is_train=False)
-                # Issue: calculate size
-                mask_inbbox = self.alphaMask.sample_alpha(
-                        xyz_sampled).reshape(xyz_sampled.shape[:-1]).any(-1)
-
-            mask_filtered.append(mask_inbbox.cpu())
-
-        mask_filtered = torch.cat(mask_filtered).view(all_rgbs.shape[:-1])
-
-        print(f'Ray filtering done! takes {time.time()-tt} s. ray mask ratio: {torch.sum(mask_filtered) / N}')
-        return all_rays[mask_filtered], all_rgbs[mask_filtered], mask_filtered
+    # @torch.no_grad()
+    # def filtering_rays(self, all_rays, all_rgbs, focal, N_samples=256, chunk=10240*5, bbox_only=False):
+    #     print('========> filtering rays ...')
+    #     tt = time.time()
+    #
+    #     N = torch.tensor(all_rays.shape[:-1]).prod()
+    #
+    #     mask_filtered = []
+    #     idx_chunks = torch.split(torch.arange(N), chunk)
+    #     for idx_chunk in idx_chunks:
+    #         rays_chunk = all_rays[idx_chunk].to(self.device)
+    #
+    #         rays_o, rays_d = rays_chunk[..., :3], rays_chunk[..., 3:6]
+    #         if bbox_only:
+    #             vec = torch.where(
+    #                 rays_d == 0, torch.full_like(rays_d, 1e-6), rays_d)
+    #             rate_a = (self.rf.aabb[1].to(rays_o) - rays_o) / vec
+    #             rate_b = (self.rf.aabb[0].to(rays_o) - rays_o) / vec
+    #             # .clamp(min=near, max=far)
+    #             t_min = torch.minimum(rate_a, rate_b).amax(-1)
+    #             # .clamp(min=near, max=far)
+    #             t_max = torch.maximum(rate_a, rate_b).amin(-1)
+    #             mask_inbbox = t_max > t_min
+    #
+    #         else:
+    #             xyz_sampled, _, _, _ = self.sample_ray(
+    #                 rays_o, rays_d, focal, N_samples=N_samples, is_train=False)
+    #             # Issue: calculate size
+    #             mask_inbbox = self.alphaMask.sample_alpha(
+    #                     xyz_sampled).reshape(xyz_sampled.shape[:-1]).any(-1)
+    #
+    #         mask_filtered.append(mask_inbbox.cpu())
+    #
+    #     mask_filtered = torch.cat(mask_filtered).view(all_rgbs.shape[:-1])
+    #
+    #     print(f'Ray filtering done! takes {time.time()-tt} s. ray mask ratio: {torch.sum(mask_filtered) / N}')
+    #     return all_rays[mask_filtered], all_rgbs[mask_filtered], mask_filtered
 
     def feature2density(self, density_features):
         if self.fea2denseAct == "softplus_shift":
@@ -316,18 +196,7 @@ class TensorNeRF(torch.nn.Module):
         elif self.fea2denseAct == "identity":
             return density_features
 
-    def sample_occupied(self):  # , rays_chunk, ndc_ray=False, N_samples=-1):
-        # viewdirs = rays_chunk[:, 3:6]
-        # if ndc_ray:
-        #     xyz_sampled, z_vals, ray_valid = self.sample_ray_ndc(rays_chunk[:, :3], viewdirs, 1, is_train=True,N_samples=N_samples)
-        #     dists = torch.cat((z_vals[:, 1:] - z_vals[:, :-1], torch.zeros_like(z_vals[:, :1])), dim=-1)
-        #     rays_norm = torch.norm(viewdirs, dim=-1, keepdim=True)
-        #     dists = dists * rays_norm
-        #     viewdirs = viewdirs / rays_norm
-        # else:
-        #     xyz_sampled, z_vals, ray_valid = self.sample_ray(rays_chunk[:, :3], viewdirs, 1, is_train=True,N_samples=N_samples)
-        #     dists = torch.cat((z_vals[:, 1:] - z_vals[:, :-1], torch.zeros_like(z_vals[:, :1])), dim=-1)
-
+    def sample_occupied(self):
         samps = torch.rand((10000, 4), device=self.device)*2 - 1
         sigma_feature = self.rf.compute_densityfeature(samps)
         validsigma = self.feature2density(sigma_feature).squeeze()
@@ -342,6 +211,14 @@ class TensorNeRF(torch.nn.Module):
             return
         else:
             self.rf.shrink(new_aabb, voxel_size)
+        self.sampler.update(self.rf)
+
+    def check_schedule(self, iter):
+        require_reassignment = False
+        require_reassignment |= self.rf.check_schedule(iter)
+        if iter in self.update_sampler_list:
+            self.sampler.update(self.rf)
+        return require_reassignment
 
     def render_env_sparse(self, ray_origins, env_dirs, roughness: float):
         B, M = env_dirs.shape[:2]
