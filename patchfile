diff --git a/models/tensor_nerf.py b/models/tensor_nerf.py
index 204d62b..8ddddd7 100644
--- a/models/tensor_nerf.py
+++ b/models/tensor_nerf.py
@@ -436,90 +314,48 @@ class TensorNeRF(torch.nn.Module):
         # rays_chunk: (N, (origin, viewdir, ray_up))
 
         # sample points
-        viewdirs = rays_chunk[:, 3:6]
-        if ndc_ray:
-            xyz_sampled, z_vals, ray_valid = self.sample_ray_ndc(
-                rays_chunk[:, :3], viewdirs, focal, is_train=is_train, N_samples=N_samples)
-            dists = torch.cat(
-                (z_vals[:, 1:] - z_vals[:, :-1], torch.zeros_like(z_vals[:, :1])), dim=-1)
-            rays_norm = torch.norm(viewdirs, dim=-1, keepdim=True)
-            dists = dists * rays_norm
-            viewdirs = viewdirs / rays_norm
-        else:
-            xyz_sampled, z_vals, ray_valid, env_mask = self.sample_ray(
-                rays_chunk[:, :3], viewdirs, focal, is_train=is_train, N_samples=N_samples, override_near=override_near)
-            dists = torch.cat(
-                (z_vals[:, 1:] - z_vals[:, :-1], torch.zeros_like(z_vals[:, :1])), dim=-1)
 
-        # xyz_sampled_shape: (N, N_samples, 3+1)
         # z_vals.shape: (N, N_samples)
         # ray_valid.shape: (N, N_samples)
-        xyz_sampled_shape = xyz_sampled[:, :, :3].shape
+        device = rays_chunk.device
+        B = rays_chunk.shape[0]
 
+        # xyz_sampled: (M, 4)
+        # ray_valid: (B, max_samps)
+        # z_vals: (B, max_samps) camera z val
+        xyz_sampled, ray_valid, max_samps, z_vals = self.sampler.sample(rays_chunk, focal, ndc_ray, override_near=override_near, is_train=is_train, N_samples=N_samples)
         xyz_normed = self.rf.normalize_coord(xyz_sampled)
+        full_shape = (B, max_samps, 3)
+        M = xyz_sampled.shape[0]
 
-        device = xyz_sampled.device
+        dists = torch.cat((z_vals[:, 1:] - z_vals[:, :-1], torch.zeros_like(z_vals[:, :1])), dim=-1)
 
-        viewdirs = viewdirs.view(-1, 1, 3).expand(xyz_sampled_shape)
-        # rays_up = rays_chunk[:, 6:9]
-        # rays_up = rays_up.view(-1, 1, 3).expand(xyz_sampled_shape)
-        B = xyz_sampled.shape[0]
-        n_samples = xyz_sampled_shape[1]
-
-        ior_i_full = init_refraction_index.to(device).reshape(-1, 1).expand(xyz_sampled_shape[:-1])
-        flip = ior_i_full > self.min_refraction
-
-        # sample alphas and cull samples from the ray
-        alpha_mask = torch.zeros(xyz_sampled_shape[:-1], device=device, dtype=bool)
-        if self.alphaMask is not None and self.enable_alpha_mask and not flip.any():
-            alpha_mask[ray_valid] = self.alphaMask.sample_alpha(
-                xyz_sampled[ray_valid], contract_space=self.rf.contract_space)
-
-            # T = torch.cumprod(torch.cat([
-            #     torch.ones(alphas.shape[0], 1, device=alphas.device),
-            #     1. - alphas + 1e-10
-            # ], dim=-1), dim=-1)[:, :-1]
-            # ray_invalid = ~ray_valid
-            # ray_invalid |= (~alpha_mask)
-            ray_valid ^= alpha_mask
+        viewdirs = rays_chunk[:, 3:6].view(-1, 1, 3).expand(full_shape)
 
         # sigma.shape: (N, N_samples)
-        sigma = torch.zeros(xyz_sampled_shape[:-1], device=device)
-        world_normal = torch.zeros(xyz_sampled_shape, device=device)
-        rgb = torch.zeros((*xyz_sampled_shape[:2], 3), device=device)
-        p_world_normal = torch.zeros(xyz_sampled_shape, device=device)
+        sigma = torch.zeros(full_shape[:-1], device=device)
+        rgb = torch.zeros(full_shape, device=device)
+
+        world_normal = torch.zeros((M, 3), device=device)
+        p_world_normal = torch.zeros((M, 3), device=device)
 
         if ray_valid.any():
-            sigma_feature = self.rf.compute_densityfeature(xyz_normed[ray_valid])
-            #  sigma_feature, world_normal[ray_valid] = self.rf.compute_density_norm(xyz_normed[ray_valid], self.feature2density)
-            #  _, world_normal[ray_valid] = self.rf.compute_density_norm(xyz_normed[ray_valid], self.feature2density)
+            if self.rf.separate_appgrid:
+                sigma_feature = self.rf.compute_densityfeature(xyz_normed)
+            else:
+                sigma_feature, all_app_features = self.rf.compute_densityfeature(xyz_normed)
+            #  sigma_feature, world_normal[ray_valid] = self.rf.compute_density_norm(xyz_normed, self.feature2density)
+            #  _, world_normal[ray_valid] = self.rf.compute_density_norm(xyz_normed, self.feature2density)
             validsigma = self.feature2density(sigma_feature)
             sigma[ray_valid] = validsigma
 
-            #  with torch.enable_grad():
-            #      xyz_g = xyz_sampled[ray_valid].clone()
-            #      xyz_g.requires_grad = True
-            #
-            #      # compute sigma
-            #      xyz_g_normed = self.rf.normalize_coord(xyz_g)
-            #      sigma_feature = self.rf.compute_densityfeature(xyz_g_normed)
-            #      validsigma = self.feature2density(sigma_feature)
-            #      sigma[ray_valid] = validsigma
-            #
-            #      # compute normal
-            #      grad_outputs = torch.ones_like(validsigma)
-            #      surf_grad = grad(validsigma, xyz_g, grad_outputs=grad_outputs, create_graph=True, allow_unused=True)[0][:, :3]
-            #      surf_grad = surf_grad / (torch.norm(surf_grad, dim=1, keepdim=True)+1e-8)
-            #
-            #      world_normal[ray_valid] = surf_grad
-
 
         if self.rf.contract_space and self.infinity_border:
             at_infinity = self.at_infinity(xyz_normed)
             sigma[at_infinity] = 100
 
         # weight: [N_rays, N_samples]
-        alpha, weight, bg_weight = raw2alpha(sigma, flip, dists * self.distance_scale)
+        alpha, weight, bg_weight = raw2alpha(sigma, dists * self.distance_scale)
 
         # ic(weight.sum(dim=1).mean(), override_near)
         # if override_near is not None:
@@ -536,11 +372,11 @@ class TensorNeRF(torch.nn.Module):
         # weight[xyz_normed[..., 2] > 0.2] = 0
         full_weight = torch.cat([weight, bg_weight], dim=1)
 
-        S = torch.linspace(0, 1, n_samples+1, device=device).reshape(-1, 1)
+        S = torch.linspace(0, 1, max_samps+1, device=device).reshape(-1, 1)
         fweight = (S - S.T).abs()
 
         floater_loss_1 = torch.einsum('bj,bk,jk', full_weight.reshape(B, -1), full_weight.reshape(B, -1), fweight).clip(min=self.max_floater_loss)
-        floater_loss_2 = (full_weight**2).sum(dim=1).sum()/3/n_samples
+        floater_loss_2 = (full_weight**2).sum(dim=1).sum()/3/max_samps
 
         # this one consumes too much memory
         # floater_loss_1 = torch.einsum('bj,bk,jk->b', full_weight.reshape(B, -1), full_weight.reshape(B, -1), fweight).clip(min=self.max_floater_loss).sum()
@@ -548,14 +384,11 @@ class TensorNeRF(torch.nn.Module):
         floater_loss = (floater_loss_1 + floater_loss_2)#.clip(min=self.max_floater_loss)
 
         # app stands for appearance
-        app_mask = (weight > self.rayMarch_weight_thres)
+        full_app_mask = (weight > self.rayMarch_weight_thres)
+        app_mask = full_app_mask[ray_valid]
 
         # debug = torch.zeros((B, n_samples, 3), dtype=torch.short, device=device)
-        debug = torch.zeros((B, n_samples, 3), dtype=torch.float, device=device, requires_grad=False)
-        recur_depth = z_vals.clone()
-        depth_map = torch.sum(weight * recur_depth, 1)
-        acc_map = bg_weight #torch.sum(weight, 1)
-        depth_map = depth_map + (1. - acc_map) * rays_chunk[..., -1]
+        debug = torch.zeros(full_shape, dtype=torch.float, device=device, requires_grad=False)
         bounce_count = 0
 
         if app_mask.any():
@@ -566,11 +399,14 @@ class TensorNeRF(torch.nn.Module):
             # pred norms is initialized to world norms to set loss to zero for align_world_loss when prediction is none
             p_world_normal[app_mask] = norms.detach()
 
-            app_features = self.rf.compute_appfeature(xyz_normed[app_mask])
+            if self.rf.separate_appgrid:
+                app_features = self.rf.compute_appfeature(xyz_normed[app_mask])
+            else:
+                app_features = all_app_features[app_mask]
 
             # get base color of the point
             diffuse, tint, matprop = self.diffuse_module(
-                xyz_normed[app_mask], viewdirs[app_mask], app_features)
+                xyz_normed[app_mask], viewdirs[full_app_mask], app_features)
             # diffuse = diffuse.type(rgb.dtype)
 
             noise_app_features = (app_features + torch.randn_like(app_features) * self.appdim_noise_std)
@@ -581,11 +417,14 @@ class TensorNeRF(torch.nn.Module):
                 l = self.l# if is_train else 1
                 v_world_normal = ((1-l)*p_world_normal + l*world_normal)
                 v_world_normal = v_world_normal / (v_world_normal.norm(dim=-1, keepdim=True) + 1e-20)
+
+                # TODO REMOVE
+                v_world_normal = xyz_normed[..., :3] / (xyz_normed[..., :3].norm(dim=-1, keepdim=True) + 1e-20)
             else:
                 v_world_normal = world_normal
 
             # calculate reflected ray direction
-            V = -viewdirs[app_mask]
+            V = -viewdirs[full_app_mask]
             L = v_world_normal[app_mask]
             refdirs = 2 * (V * L).sum(-1, keepdim=True) * L - V
 
@@ -595,9 +434,9 @@ class TensorNeRF(torch.nn.Module):
                 ratio_diffuse = 1
                 ratio_reflected = 0
             elif self.ref_module is not None and recur >= self.max_recurs:
-                viewdotnorm = (viewdirs[app_mask]*L).sum(dim=-1, keepdim=True)
+                viewdotnorm = (viewdirs[full_app_mask]*L).sum(dim=-1, keepdim=True)
                 ref_col = self.ref_module(
-                    xyz_normed[app_mask], viewdirs[app_mask],
+                    xyz_normed[app_mask], viewdirs[full_app_mask],
                     noise_app_features, refdirs=refdirs,
                     roughness=roughness, viewdotnorm=viewdotnorm)
                 reflect_rgb = tint * ref_col
@@ -606,18 +445,10 @@ class TensorNeRF(torch.nn.Module):
                 num_roughness_rays = self.roughness_rays // 2 if recur > 0 else self.roughness_rays
                 # num_roughness_rays = self.roughness_rays# if is_train else 100
                 # compute which rays to reflect
-                # TODO REMOVE
-                # bounce_mask, full_bounce_mask, inv_full_bounce_mask = select_top_n_app_mask(
-                #         app_mask, weight, ratio_reflected, self.max_bounce_rays,
-                #         self.specularity_threshold, self.bounce_min_weight)
                 ratio_diffuse = matprop['ratio_diffuse']
                 ratio_reflected = 1 - ratio_diffuse
                 bounce_mask, full_bounce_mask, inv_full_bounce_mask = self.selector(
-                        app_mask, weight.detach(), 1-roughness.detach())
-                # if the bounce is not calculated, set the ratio to 0 to make sure we don't get black spots
-                # if not bounce_mask.all() and not is_train:
-                #     ratio_diffuse[~bounce_mask] += ratio_reflected[~bounce_mask]
-                #     ratio_reflected[~bounce_mask] = 0
+                        full_app_mask, weight.detach(), 1-roughness.detach())
 
                 if bounce_mask.sum() > 0:
                     # decide how many bounces to calculate
@@ -627,13 +458,12 @@ class TensorNeRF(torch.nn.Module):
                     outward = L[bounce_mask]
                     # ray_noise = self.roughness2noisestd(roughness[bounce_mask].reshape(-1, 1, 1)) * torch.normal(0, 1, (N, num_roughness_rays, 3), device=device)
                     # diffuse_noise = ray_noise / (torch.linalg.norm(ray_noise, dim=-1, keepdim=True)+1e-8)
-                    # noise_rays = self.sampler.sample(num_roughness_rays, V[bounce_mask].detach(), outward.detach(), roughness[bounce_mask].detach())
-                    # noise_rays, mipval = self.sampler.sample(num_roughness_rays, brefdirs.detach(), V[bounce_mask], outward.detach(), roughness[bounce_mask])
-                    noise_rays, mipval = self.sampler.sample(num_roughness_rays, brefdirs, V[bounce_mask], outward, roughness[bounce_mask])
+                    # noise_rays = self.brdf_sampler.sample(num_roughness_rays, V[bounce_mask].detach(), outward.detach(), roughness[bounce_mask].detach())
+                    # noise_rays, mipval = self.brdf_sampler.sample(num_roughness_rays, brefdirs.detach(), V[bounce_mask], outward.detach(), roughness[bounce_mask])
+                    noise_rays, mipval = self.brdf_sampler.sample(num_roughness_rays, brefdirs, V[bounce_mask], outward, roughness[bounce_mask])
                     bounce_rays = torch.cat([
-                        xyz_sampled[full_bounce_mask][..., :3].reshape(-1, 1, 3).expand(noise_rays.shape),
+                        xyz_sampled[full_bounce_mask[ray_valid]][..., :3].reshape(-1, 1, 3).expand(noise_rays.shape),
                         noise_rays,
-                        # rays_up[full_bounce_mask].reshape(-1, 1, 3).expand(noise_rays.shape)
                     ], dim=-1)
                     D = bounce_rays.shape[-1]
 
@@ -682,9 +512,9 @@ class TensorNeRF(torch.nn.Module):
                 if inv_full_bounce_mask.any():
                     if self.ref_module is not None:
                         # compute other reflections using ref module
-                        viewdotnorm = (viewdirs[inv_full_bounce_mask]*L[~bounce_mask]).sum(dim=-1, keepdim=True)
+                        viewdotnorm = (viewdirs[full_app_mask][inv_full_bounce_mask]*L[~bounce_mask]).sum(dim=-1, keepdim=True)
                         ref_col = self.ref_module(
-                            xyz_normed[inv_full_bounce_mask], viewdirs[inv_full_bounce_mask],
+                            xyz_normed[inv_full_bounce_mask], viewdirs[full_app_mask][inv_full_bounce_mask],
                             noise_app_features[~bounce_mask], refdirs=refdirs[~bounce_mask],
                             roughness=roughness[~bounce_mask], viewdotnorm=viewdotnorm)
                         reflect_rgb[~bounce_mask] = tint[~bounce_mask] * ref_col
@@ -699,13 +529,13 @@ class TensorNeRF(torch.nn.Module):
             reflectivity = matprop['reflectivity']
             # rgb[app_mask] = tint * ((1-reflectivity)*matprop['ambient'] + reflectivity * reflect_rgb)
             # rgb[app_mask] = reflect_rgb + matprop['diffuse']
-            rgb[app_mask] = reflect_rgb# + matprop['diffuse']
+            rgb[full_app_mask] = reflect_rgb# + matprop['diffuse']
             # rgb[app_mask] = tint * reflectivity * reflect_rgb + (1-reflectivity)*matprop['diffuse']
             # rgb[app_mask] = tint * (ambient + reflectivity * reflect_rgb)
 
             align_world_loss = (1-(p_world_normal * world_normal).sum(dim=-1).clamp(max=self.max_normal_similarity))
             # align_world_loss = torch.linalg.norm(p_world_normal - world_normal, dim=-1)
-            normal_loss = (weight * align_world_loss).sum(dim=-1).mean()
+            normal_loss = (weight[ray_valid] * align_world_loss).sum(dim=-1).mean()
             tint_brightness = tint.mean(dim=-1)
         else:
             ratio_diffuse = torch.tensor(0.0)
@@ -717,8 +547,8 @@ class TensorNeRF(torch.nn.Module):
             reflectivity = torch.tensor(0.0)
         
         # viewdirs point inward. -viewdirs aligns with p_world_normal. So we want it below 0
-        backwards_rays_loss = torch.matmul(viewdirs.reshape(-1, 1, 3), p_world_normal.reshape(-1, 3, 1)).reshape(app_mask.shape).clamp(min=0)**2
-        backwards_rays_loss = (weight * backwards_rays_loss).sum(dim=1).mean()
+        backwards_rays_loss = torch.matmul(viewdirs[ray_valid].reshape(-1, 1, 3), p_world_normal.reshape(-1, 3, 1)).reshape(app_mask.shape).clamp(min=0)**2
+        backwards_rays_loss = (weight[ray_valid] * backwards_rays_loss).sum(dim=0).mean()
 
         # calculate depth
 
@@ -726,7 +556,7 @@ class TensorNeRF(torch.nn.Module):
         # (N, bundle_size, bundle_size)
         acc_map = torch.sum(weight, 1)
         with torch.no_grad():
-            depth_map = torch.sum(weight * recur_depth, 1)
+            depth_map = torch.sum(weight * z_vals, 1)
             depth_map = depth_map + (1. - acc_map) * rays_chunk[..., -1]
 
             # view dependent normal map
@@ -741,7 +571,9 @@ class TensorNeRF(torch.nn.Module):
             #     (torch.norm(p_world_normal_map, dim=-1, keepdim=True)+1e-8)
             # d_world_normal_map = torch.sum(weight[..., None] * world_normal, 1)
             # d_world_normal_map = d_world_normal_map / (torch.linalg.norm(d_world_normal_map, dim=-1, keepdim=True)+1e-8)
-            v_world_normal_map = torch.sum(weight[..., None] * v_world_normal, 1)
+            full_v_world_normal = torch.zeros(full_shape, device=device)
+            full_v_world_normal[ray_valid] = v_world_normal
+            v_world_normal_map = torch.sum(weight[..., None] * full_v_world_normal, 1)
             v_world_normal_map = v_world_normal_map / (torch.linalg.norm(v_world_normal_map, dim=-1, keepdim=True)+1e-8)
             # d_normal_map = torch.matmul(row_basis, d_world_normal_map.unsqueeze(-1)).squeeze(-1)
             # p_normal_map = torch.matmul(
@@ -751,14 +583,21 @@ class TensorNeRF(torch.nn.Module):
             v_world_normal_map = acc_map[..., None] * v_world_normal_map + (1 - acc_map[..., None])
 
             inds = ((weight * (alpha < self.alphaMask_thres)).max(dim=1).indices).clip(min=0)
-            termination_xyz = xyz_sampled[range(xyz_sampled_shape[0]), inds]
+            full_xyz = torch.zeros((B, max_samps, 4), device=device)
+            full_xyz[ray_valid] = xyz_sampled
+            termination_xyz = full_xyz[range(full_shape[0]), inds]
 
             # collect statistics about the surface
             # surface width in voxels
             surface_width = (torch.arange(weight.shape[1], device=device)[None, :] * weight).std(dim=1)
-            weight_slice = weight[torch.where(acc_map > 0.5)[0]].reshape(1, -1)
+            inds = torch.where(acc_map > 0.5)
+            if len(inds) > 0:
+                weight_slice = weight[inds[0]].reshape(1, -1)
+            else:
+                weight_slice = torch.empty((1, 0), device=device)
             # TODO REMOVE
-            LOGGER.log_norms_n_rays(xyz_sampled, v_world_normal, weight)
+            if app_mask.sum() > 0:
+                LOGGER.log_norms_n_rays(xyz_sampled[app_mask], v_world_normal[app_mask], weight[full_app_mask])
         rgb_map = torch.sum(weight[..., None] * rgb, -2)
 
         if tonemap:
